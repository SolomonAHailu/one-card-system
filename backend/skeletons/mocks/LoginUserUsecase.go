// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	adminmodels "github.com/SolomonAHailu/one-card-system/models/adminmodels"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/SolomonAHailu/one-card-system/skeletons/repo"
)

// LoginUserUsecase is an autogenerated mock type for the LoginUserUsecase type
type LoginUserUsecase struct {
	mock.Mock
}

// Login provides a mock function with given fields: loginUser
func (_m *LoginUserUsecase) Login(loginUser *repo.LoginUserRequest) (adminmodels.Users, error) {
	ret := _m.Called(loginUser)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 adminmodels.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(*repo.LoginUserRequest) (adminmodels.Users, error)); ok {
		return rf(loginUser)
	}
	if rf, ok := ret.Get(0).(func(*repo.LoginUserRequest) adminmodels.Users); ok {
		r0 = rf(loginUser)
	} else {
		r0 = ret.Get(0).(adminmodels.Users)
	}

	if rf, ok := ret.Get(1).(func(*repo.LoginUserRequest) error); ok {
		r1 = rf(loginUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoginUserUsecase creates a new instance of LoginUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoginUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoginUserUsecase {
	mock := &LoginUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

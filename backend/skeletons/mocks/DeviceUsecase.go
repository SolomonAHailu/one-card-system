// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	adminmodels "github.com/SolomonAHailu/one-card-system/models/adminmodels"
	gin "github.com/gin-gonic/gin"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// DeviceUsecase is an autogenerated mock type for the DeviceUsecase type
type DeviceUsecase struct {
	mock.Mock
}

// CreatedDevice provides a mock function with given fields: c, db
func (_m *DeviceUsecase) CreatedDevice(c *gin.Context, db *gorm.DB) (adminmodels.Devices, error) {
	ret := _m.Called(c, db)

	if len(ret) == 0 {
		panic("no return value specified for CreatedDevice")
	}

	var r0 adminmodels.Devices
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *gorm.DB) (adminmodels.Devices, error)); ok {
		return rf(c, db)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *gorm.DB) adminmodels.Devices); ok {
		r0 = rf(c, db)
	} else {
		r0 = ret.Get(0).(adminmodels.Devices)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *gorm.DB) error); ok {
		r1 = rf(c, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDeviceUsecase creates a new instance of DeviceUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceUsecase {
	mock := &DeviceUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

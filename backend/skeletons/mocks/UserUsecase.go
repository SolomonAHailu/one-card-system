// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	adminmodels "github.com/SolomonAHailu/one-card-system/models/adminmodels"
	adminRepo "github.com/SolomonAHailu/one-card-system/skeletons/repo/admin"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: createUser
func (_m *UserUsecase) CreateUser(createUser *adminRepo.CreateUserRequest) (adminmodels.Users, error) {
	ret := _m.Called(createUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 adminmodels.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.CreateUserRequest) (adminmodels.Users, error)); ok {
		return rf(createUser)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.CreateUserRequest) adminmodels.Users); ok {
		r0 = rf(createUser)
	} else {
		r0 = ret.Get(0).(adminmodels.Users)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.CreateUserRequest) error); ok {
		r1 = rf(createUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserById provides a mock function with given fields: createUser
func (_m *UserUsecase) DeleteUserById(createUser *adminRepo.CreateUserRequest) (adminmodels.Users, error) {
	ret := _m.Called(createUser)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserById")
	}

	var r0 adminmodels.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.CreateUserRequest) (adminmodels.Users, error)); ok {
		return rf(createUser)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.CreateUserRequest) adminmodels.Users); ok {
		r0 = rf(createUser)
	} else {
		r0 = ret.Get(0).(adminmodels.Users)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.CreateUserRequest) error); ok {
		r1 = rf(createUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByRoleId provides a mock function with given fields: createUser
func (_m *UserUsecase) GetUsersByRoleId(createUser *adminRepo.CreateUserRequest) (adminmodels.Users, error) {
	ret := _m.Called(createUser)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByRoleId")
	}

	var r0 adminmodels.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.CreateUserRequest) (adminmodels.Users, error)); ok {
		return rf(createUser)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.CreateUserRequest) adminmodels.Users); ok {
		r0 = rf(createUser)
	} else {
		r0 = ret.Get(0).(adminmodels.Users)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.CreateUserRequest) error); ok {
		r1 = rf(createUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserById provides a mock function with given fields: createUser
func (_m *UserUsecase) UpdateUserById(createUser *adminRepo.CreateUserRequest) (adminmodels.Users, error) {
	ret := _m.Called(createUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserById")
	}

	var r0 adminmodels.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.CreateUserRequest) (adminmodels.Users, error)); ok {
		return rf(createUser)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.CreateUserRequest) adminmodels.Users); ok {
		r0 = rf(createUser)
	} else {
		r0 = ret.Get(0).(adminmodels.Users)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.CreateUserRequest) error); ok {
		r1 = rf(createUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

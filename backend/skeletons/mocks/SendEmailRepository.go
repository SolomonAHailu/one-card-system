// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	adminRepo "github.com/SolomonAHailu/one-card-system/skeletons/repo/admincontrollers"
	mock "github.com/stretchr/testify/mock"
)

// SendEmailRepository is an autogenerated mock type for the SendEmailRepository type
type SendEmailRepository struct {
	mock.Mock
}

// SendHTMLEmail provides a mock function with given fields: sendEmail
func (_m *SendEmailRepository) SendHTMLEmail(sendEmail *adminRepo.SendEmailRequest) (adminRepo.EmailRequest, error) {
	ret := _m.Called(sendEmail)

	if len(ret) == 0 {
		panic("no return value specified for SendHTMLEmail")
	}

	var r0 adminRepo.EmailRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.SendEmailRequest) (adminRepo.EmailRequest, error)); ok {
		return rf(sendEmail)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.SendEmailRequest) adminRepo.EmailRequest); ok {
		r0 = rf(sendEmail)
	} else {
		r0 = ret.Get(0).(adminRepo.EmailRequest)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.SendEmailRequest) error); ok {
		r1 = rf(sendEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSendEmailRepository creates a new instance of SendEmailRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSendEmailRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SendEmailRepository {
	mock := &SendEmailRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

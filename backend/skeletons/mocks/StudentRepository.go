// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	registrarmodels "github.com/SolomonAHailu/one-card-system/models/registrarmodels"
	regRepo "github.com/SolomonAHailu/one-card-system/skeletons/repo/registrarcontrollers"
	mock "github.com/stretchr/testify/mock"
)

// StudentRepository is an autogenerated mock type for the StudentRepository type
type StudentRepository struct {
	mock.Mock
}

// GetStudentById provides a mock function with given fields: getStudentById
func (_m *StudentRepository) GetStudentById(getStudentById *regRepo.StudentManagementRequest) (registrarmodels.Student, error) {
	ret := _m.Called(getStudentById)

	if len(ret) == 0 {
		panic("no return value specified for GetStudentById")
	}

	var r0 registrarmodels.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(*regRepo.StudentManagementRequest) (registrarmodels.Student, error)); ok {
		return rf(getStudentById)
	}
	if rf, ok := ret.Get(0).(func(*regRepo.StudentManagementRequest) registrarmodels.Student); ok {
		r0 = rf(getStudentById)
	} else {
		r0 = ret.Get(0).(registrarmodels.Student)
	}

	if rf, ok := ret.Get(1).(func(*regRepo.StudentManagementRequest) error); ok {
		r1 = rf(getStudentById)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStudentCardNumber provides a mock function with given fields: updateStudentById
func (_m *StudentRepository) UpdateStudentCardNumber(updateStudentById *regRepo.StudentManagementRequest) (registrarmodels.Student, error) {
	ret := _m.Called(updateStudentById)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStudentCardNumber")
	}

	var r0 registrarmodels.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(*regRepo.StudentManagementRequest) (registrarmodels.Student, error)); ok {
		return rf(updateStudentById)
	}
	if rf, ok := ret.Get(0).(func(*regRepo.StudentManagementRequest) registrarmodels.Student); ok {
		r0 = rf(updateStudentById)
	} else {
		r0 = ret.Get(0).(registrarmodels.Student)
	}

	if rf, ok := ret.Get(1).(func(*regRepo.StudentManagementRequest) error); ok {
		r1 = rf(updateStudentById)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStudentPhoto provides a mock function with given fields: updateStudentPhoto
func (_m *StudentRepository) UpdateStudentPhoto(updateStudentPhoto *regRepo.StudentManagementRequest) (registrarmodels.Student, error) {
	ret := _m.Called(updateStudentPhoto)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStudentPhoto")
	}

	var r0 registrarmodels.Student
	var r1 error
	if rf, ok := ret.Get(0).(func(*regRepo.StudentManagementRequest) (registrarmodels.Student, error)); ok {
		return rf(updateStudentPhoto)
	}
	if rf, ok := ret.Get(0).(func(*regRepo.StudentManagementRequest) registrarmodels.Student); ok {
		r0 = rf(updateStudentPhoto)
	} else {
		r0 = ret.Get(0).(registrarmodels.Student)
	}

	if rf, ok := ret.Get(1).(func(*regRepo.StudentManagementRequest) error); ok {
		r1 = rf(updateStudentPhoto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStudentRepository creates a new instance of StudentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStudentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StudentRepository {
	mock := &StudentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

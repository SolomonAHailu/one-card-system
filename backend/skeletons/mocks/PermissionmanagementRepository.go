// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	adminmodels "github.com/SolomonAHailu/one-card-system/models/adminmodels"
	adminRepo "github.com/SolomonAHailu/one-card-system/skeletons/repo/admincontrollers"

	mock "github.com/stretchr/testify/mock"
)

// PermissionmanagementRepository is an autogenerated mock type for the PermissionmanagementRepository type
type PermissionmanagementRepository struct {
	mock.Mock
}

// CreatePermission provides a mock function with given fields: createPermission
func (_m *PermissionmanagementRepository) CreatePermission(createPermission *adminRepo.CreatePermissionRequest) (adminmodels.Permissions, error) {
	ret := _m.Called(createPermission)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermission")
	}

	var r0 adminmodels.Permissions
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.CreatePermissionRequest) (adminmodels.Permissions, error)); ok {
		return rf(createPermission)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.CreatePermissionRequest) adminmodels.Permissions); ok {
		r0 = rf(createPermission)
	} else {
		r0 = ret.Get(0).(adminmodels.Permissions)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.CreatePermissionRequest) error); ok {
		r1 = rf(createPermission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermission provides a mock function with given fields: deletePermission
func (_m *PermissionmanagementRepository) DeletePermission(deletePermission *adminRepo.CreatePermissionRequest) (adminmodels.Permissions, error) {
	ret := _m.Called(deletePermission)

	if len(ret) == 0 {
		panic("no return value specified for DeletePermission")
	}

	var r0 adminmodels.Permissions
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.CreatePermissionRequest) (adminmodels.Permissions, error)); ok {
		return rf(deletePermission)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.CreatePermissionRequest) adminmodels.Permissions); ok {
		r0 = rf(deletePermission)
	} else {
		r0 = ret.Get(0).(adminmodels.Permissions)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.CreatePermissionRequest) error); ok {
		r1 = rf(deletePermission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermission provides a mock function with given fields: getPermission
func (_m *PermissionmanagementRepository) GetPermission(getPermission *adminRepo.CreatePermissionRequest) (adminmodels.Permissions, error) {
	ret := _m.Called(getPermission)

	if len(ret) == 0 {
		panic("no return value specified for GetPermission")
	}

	var r0 adminmodels.Permissions
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.CreatePermissionRequest) (adminmodels.Permissions, error)); ok {
		return rf(getPermission)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.CreatePermissionRequest) adminmodels.Permissions); ok {
		r0 = rf(getPermission)
	} else {
		r0 = ret.Get(0).(adminmodels.Permissions)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.CreatePermissionRequest) error); ok {
		r1 = rf(getPermission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissions provides a mock function with given fields: getPermissions
func (_m *PermissionmanagementRepository) GetPermissions(getPermissions *adminRepo.CreatePermissionRequest) ([]adminmodels.Permissions, error) {
	ret := _m.Called(getPermissions)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissions")
	}

	var r0 []adminmodels.Permissions
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.CreatePermissionRequest) ([]adminmodels.Permissions, error)); ok {
		return rf(getPermissions)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.CreatePermissionRequest) []adminmodels.Permissions); ok {
		r0 = rf(getPermissions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adminmodels.Permissions)
		}
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.CreatePermissionRequest) error); ok {
		r1 = rf(getPermissions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePermission provides a mock function with given fields: updatePermission
func (_m *PermissionmanagementRepository) UpdatePermission(updatePermission *adminRepo.CreatePermissionRequest) (adminmodels.Permissions, error) {
	ret := _m.Called(updatePermission)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermission")
	}

	var r0 adminmodels.Permissions
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.CreatePermissionRequest) (adminmodels.Permissions, error)); ok {
		return rf(updatePermission)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.CreatePermissionRequest) adminmodels.Permissions); ok {
		r0 = rf(updatePermission)
	} else {
		r0 = ret.Get(0).(adminmodels.Permissions)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.CreatePermissionRequest) error); ok {
		r1 = rf(updatePermission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPermissionmanagementRepository creates a new instance of PermissionmanagementRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPermissionmanagementRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PermissionmanagementRepository {
	mock := &PermissionmanagementRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	adminmodels "github.com/SolomonAHailu/one-card-system/models/adminmodels"
	adminRepo "github.com/SolomonAHailu/one-card-system/skeletons/repo/admin"

	mock "github.com/stretchr/testify/mock"
)

// RolepermissionmanagementUsecase is an autogenerated mock type for the RolepermissionmanagementUsecase type
type RolepermissionmanagementUsecase struct {
	mock.Mock
}

// CreateRolePermission provides a mock function with given fields: createRolepermission
func (_m *RolepermissionmanagementUsecase) CreateRolePermission(createRolepermission *adminRepo.RolepermissionmanagementRequest) (adminmodels.Permissions, error) {
	ret := _m.Called(createRolepermission)

	if len(ret) == 0 {
		panic("no return value specified for CreateRolePermission")
	}

	var r0 adminmodels.Permissions
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.RolepermissionmanagementRequest) (adminmodels.Permissions, error)); ok {
		return rf(createRolepermission)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.RolepermissionmanagementRequest) adminmodels.Permissions); ok {
		r0 = rf(createRolepermission)
	} else {
		r0 = ret.Get(0).(adminmodels.Permissions)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.RolepermissionmanagementRequest) error); ok {
		r1 = rf(createRolepermission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRolePermissionById provides a mock function with given fields: deleteRolepermissionById
func (_m *RolepermissionmanagementUsecase) DeleteRolePermissionById(deleteRolepermissionById *adminRepo.RolepermissionmanagementRequest) (adminmodels.Permissions, error) {
	ret := _m.Called(deleteRolepermissionById)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRolePermissionById")
	}

	var r0 adminmodels.Permissions
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.RolepermissionmanagementRequest) (adminmodels.Permissions, error)); ok {
		return rf(deleteRolepermissionById)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.RolepermissionmanagementRequest) adminmodels.Permissions); ok {
		r0 = rf(deleteRolepermissionById)
	} else {
		r0 = ret.Get(0).(adminmodels.Permissions)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.RolepermissionmanagementRequest) error); ok {
		r1 = rf(deleteRolepermissionById)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRolePermissionByRoleId provides a mock function with given fields: getRolepermissionById
func (_m *RolepermissionmanagementUsecase) GetRolePermissionByRoleId(getRolepermissionById *adminRepo.RolepermissionmanagementRequest) (adminmodels.Permissions, error) {
	ret := _m.Called(getRolepermissionById)

	if len(ret) == 0 {
		panic("no return value specified for GetRolePermissionByRoleId")
	}

	var r0 adminmodels.Permissions
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.RolepermissionmanagementRequest) (adminmodels.Permissions, error)); ok {
		return rf(getRolepermissionById)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.RolepermissionmanagementRequest) adminmodels.Permissions); ok {
		r0 = rf(getRolepermissionById)
	} else {
		r0 = ret.Get(0).(adminmodels.Permissions)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.RolepermissionmanagementRequest) error); ok {
		r1 = rf(getRolepermissionById)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRolePermissions provides a mock function with given fields: getRolepermission
func (_m *RolepermissionmanagementUsecase) GetRolePermissions(getRolepermission *adminRepo.RolepermissionmanagementRequest) ([]adminmodels.Permissions, error) {
	ret := _m.Called(getRolepermission)

	if len(ret) == 0 {
		panic("no return value specified for GetRolePermissions")
	}

	var r0 []adminmodels.Permissions
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.RolepermissionmanagementRequest) ([]adminmodels.Permissions, error)); ok {
		return rf(getRolepermission)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.RolepermissionmanagementRequest) []adminmodels.Permissions); ok {
		r0 = rf(getRolepermission)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adminmodels.Permissions)
		}
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.RolepermissionmanagementRequest) error); ok {
		r1 = rf(getRolepermission)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRolePermission provides a mock function with given fields: updateRolepermissionById
func (_m *RolepermissionmanagementUsecase) UpdateRolePermission(updateRolepermissionById *adminRepo.RolepermissionmanagementRequest) (adminmodels.Permissions, error) {
	ret := _m.Called(updateRolepermissionById)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRolePermission")
	}

	var r0 adminmodels.Permissions
	var r1 error
	if rf, ok := ret.Get(0).(func(*adminRepo.RolepermissionmanagementRequest) (adminmodels.Permissions, error)); ok {
		return rf(updateRolepermissionById)
	}
	if rf, ok := ret.Get(0).(func(*adminRepo.RolepermissionmanagementRequest) adminmodels.Permissions); ok {
		r0 = rf(updateRolepermissionById)
	} else {
		r0 = ret.Get(0).(adminmodels.Permissions)
	}

	if rf, ok := ret.Get(1).(func(*adminRepo.RolepermissionmanagementRequest) error); ok {
		r1 = rf(updateRolepermissionById)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRolepermissionmanagementUsecase creates a new instance of RolepermissionmanagementUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRolepermissionmanagementUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RolepermissionmanagementUsecase {
	mock := &RolepermissionmanagementUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
